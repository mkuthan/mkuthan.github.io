<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DDD | Passionate Developer]]></title>
  <link href="http://mkuthan.github.io/blog/categories/ddd/atom.xml" rel="self"/>
  <link href="http://mkuthan.github.io/"/>
  <updated>2017-11-26T21:35:57+00:00</updated>
  <id>http://mkuthan.github.io/</id>
  <author>
    <name><![CDATA[Marcin Kuthan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Learn DDD]]></title>
    <link href="http://mkuthan.github.io/blog/2014/09/22/ddd-how-to-learn/"/>
    <updated>2014-09-22T00:00:00+00:00</updated>
    <id>http://mkuthan.github.io/blog/2014/09/22/ddd-how-to-learn</id>
    <content type="html"><![CDATA[<h2>Books</h2>

<p><a href="https:///show/179133.Domain_Driven_Designwww.goodreads.com/book">Domain Driven Design</a> by Eric Evans.</p>

<p>You have to read this book, period. From the very beginning to very end.
Do not stop reading after first part of the book, the part about strategic design is much more important.
Study this book again and again. I did not read this book at once, it would be impossible mission.
Every time I back to this book I found something new, every single word in this book is important and brings some meaning.</p>

<p><a href="https://www.goodreads.com/book/show/15756865-implementing-domain-driven-design">Implementing Domain Driven Design</a> by Vaughn Vernon.</p>

<p>More practical and easier to digest book than previous one. Not so brilliant but still worth reading.</p>

<p><a href="https://www.goodreads.com/book/show/19086899-exploring-cqrs-and-event-sourcing">Exploring CQRS and Event Sourcing</a></p>

<p>Excellent DDD/CQRS case study with working code on GitHub.
Real world example how to define bounded context and how to integrate them using domain events.
Awesome!</p>

<p><a href="https://www.goodreads.com/book/show/434826.Enterprise_Patterns_and_MDA">Enterprise Patterns and MDA</a> by Jim Arlow and Ila Neusandt</p>

<p>Do not reinvent the wheel when you discover your domain model. At least for e-commerce :&ndash;)
Apply presented archetype patterns wisely and save your ass.</p>

<h2>My examples</h2>

<p><a href="http://mkuthan.github.io/presentations/ddd.html">http://mkuthan.github.io/presentations/ddd.html</a> &ndash; &ldquo;Domain Driven Desing &ndash; from trenches for practitioners&rdquo; presentation.</p>

<p><a href="http://mkuthan.github.io/blog/2013/11/04/ddd-architecture-summary/">http://mkuthan.github.io/blog/2013/11/04/ddd-architecture-summary/</a> &ndash; Blog post &ndash; my DDD check list.</p>

<p><a href="https://github.com/mkuthan/example-ddd-cqrs-server">https://github.com/mkuthan/example-ddd-cqrs-server</a> &ndash; Experiment based on Vernon book.</p>

<p><a href="https://github.com/mkuthan/example-axon">https://github.com/mkuthan/example-axon</a> &ndash; Experiment based on Exploring CQRS and Event Sourcing book.</p>

<h2>Other sources</h2>

<p><a href="http://www.udidahan.com/?blog=true">http://www.udidahan.com/</a> &ndash; Udi Dahan &ndash; one of my mentor in distributed systems and DDD architecture.</p>

<p><a href="https://groups.yahoo.com/neo/groups/domaindrivendesign">https://groups.yahoo.com/neo/groups/domaindrivendesign</a> &ndash; official DDD discussion group, addictive reading for long winter evenings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD Architecture Summary]]></title>
    <link href="http://mkuthan.github.io/blog/2013/11/04/ddd-architecture-summary/"/>
    <updated>2013-11-04T00:00:00+00:00</updated>
    <id>http://mkuthan.github.io/blog/2013/11/04/ddd-architecture-summary</id>
    <content type="html"><![CDATA[<p>In this blog post you can find my general rules for implementing system using <em>Domain Driven Design</em>. Do not use them
blindly but it is good starting point for DDD practitioners.</p>

<h2><a name="bc"></a>Bounded Context</h2>

<ul>
<li>Separate bounded context for each important module of the application (important from business partner perspective).</li>
<li>Independent of each other (if feasible).</li>
<li>For monolithic application separate <em>Spring Framework</em> context for each bounded context, e.g: <code>applicationContext-domain-crm.xml</code>,
<code>applicationContext-domain-shipping.xml</code>, etc.</li>
<li>CRUD like bounded contexts (user management, dictionaries, etc.) should be implemented as <em>Anemic Domain Model</em>.</li>
</ul>


<h2><a name="domain"></a>Domain</h2>

<ul>
<li>Place for application business logic.</li>
<li>Must be independent of the technical complexity, move technical complexity into <a href="#infrastructure">infrastructure</a>.</li>
<li>Must be independent of the particular presentation technology, move presentation related stuff into <a href="#web">web</a>.</li>
<li>Internal package structure must reflect business concepts (<a href="#bc">bounded contexts</a>), e.g: <code>crm</code>, <code>shipping</code>, <code>sales</code>,
<code>shared</code>, etc.</li>
</ul>


<h2><a name="dm"></a> Domain Model</h2>

<ul>
<li>Rich model, place for: entities, domain services, factories, strategies, specifications, etc.</li>
<li>Best object oriented practices applied (SOLID, GRASP).</li>
<li>Unit tested heavily (with mocks in the last resort).</li>
<li>Unit tests executed concurrently (on method or class level).</li>
<li>Meaningful names for domain services e.g: <code>RebateCalculator</code>, <code>PermissionChecker</code>, not <code>RebateManager</code> or
<code>SecurityService</code>.</li>
<li>Domain services dependencies are injected by constructor.</li>
<li>Having more than 2~3 dependencies is suspicious.</li>
<li>Entities are not managed by containers.</li>
<li>Aggregate root entities are domain events publishers (events collectors).</li>
<li>Aggregates in single bounded context might be strongly referenced (navigation across objects tree).</li>
<li>Aggregates from different bounded contexts are referenced by business keys (if feasible).</li>
<li>No security, no transactions, no aspects, no magic, only plain old Java.</li>
<li>Interfaces for domain services when the service is provided by <a href="#infrastructure">infrastructure</a>.</li>
<li>No interfaces for domain services implemented in the domain model itself.</li>
</ul>


<h2><a name="as"></a>Application Services</h2>

<ul>
<li>Orchestrator and facade for actors under Model.</li>
<li>Place for security handling.</li>
<li>Place for transactions handling.</li>
<li>Must not deliver any business logic, move business logic into <a href="#dm">domain model</a>. Almost no conditionals and loops.</li>
<li>Implemented as transactional script.</li>
<li>No unit tests.</li>
<li>Acceptance tests executed against this layer.</li>
<li>Cglib proxied, proxy must be serialized by session scoped beans in <a href="#web">web</a> layer.</li>
<li>Dependencies are injected on field level (private fields).</li>
<li>Ten or more dependencies for single application service is not a problem.</li>
<li>Application services are also domain event listeners.</li>
<li>Always stateless.</li>
<li>No interfaces, just implementation.</li>
</ul>


<h2><a name="ab"></a>Application Bootstrap</h2>

<ul>
<li>Initial application data.</li>
<li>Loaded during application startup (fired by <code>BootstrapEvent</code>) if application storage is empty.</li>
<li>Loading order is defined with Spring <code>Ordered</code> interface.</li>
<li>Data is loaded within Model API.</li>
<li>Data might be loaded within <a href="#as">application services</a>, e.g: load sample Excel when application is integrated with
external world this way.</li>
<li>No tests, bootstrap is tested during application startup on daily basis.</li>
</ul>


<h2><a name="infrastructure"></a>Infrastructure</h2>

<ul>
<li>Place for technical services</li>
<li>Must not deliver any business logic, move business logic into <a href="#domain">domain</a>.</li>
<li>Internal package structure must reflect technical concepts, e.g: <code>~infrastructure.jpa</code>, <code>~infrastructure.jms</code>,
<code>~infrastructure.jsf</code>, <code>~infrastructure.freemarker</code>, <code>~infrastructure.jackson</code>, etc.</li>
<li>Shared for all bounded context of the application. For more complex applications, separate technical services e.g:
<code>~infrastructure.jpa.crm</code>, <code>~infrastructure.jpa.shipping</code>, etc.</li>
<li>Class names must reflect technical concepts, e.g.: <code>JpaCustomerRepository</code>, <code>JaksonJsonSerializer</code>,
not <code>CustomerRepositoryImpl</code>, <code>JsonSerializerImpl</code>.</li>
<li>Integration tested heavily (with <em>Spring Framework</em> context loaded).</li>
<li>Integration tests executed by single thread.</li>
<li>Test execution separated from unit tests within test groups.</li>
<li>Separate <em>Spring Framework</em> context for each technical concept, e.g: <code>applicationContext-infrastructure-jpa.xml</code>,
<code>applicationContext-infrastructure-jms.xml</code>, etc.</li>
<li>Separate and independent Spring test context for each technical module, e.g: <code>testContext-jpa.xml</code>,
<code>testContext-jms.xml</code>, etc.</li>
</ul>


<h2><a name="web"></a>Web</h2>

<ul>
<li>Client specific facade (REST, MVC, JSF, etc.)</li>
<li>Place for UI logic (not applicable for JavaScript client and REST)</li>
<li>Delegates requests to <a href="#as">application services</a></li>
<li>No transactions, no method level security, move security and transactions to <a href="#as">application services</a>.</li>
<li>No business logic, move business logic into <a href="#domain">domain</a>.</li>
<li>Tested with mocked application services.</li>
<li>Tested with loaded spring context for MVC controllers (if applicable).</li>
<li>Serializable session scoped beans (to be safe all beans in this module should be <code>java.io.Serializable</code>).</li>
<li>Internal package structure must reflect UI organization structure, it might be similar to project <em>sitemap</em>.</li>
<li>Top level package might reflect technology or architecture e.g: <code>presentation</code>, <code>rest</code>, <code>mvc</code>, <code>jsf</code>, etc.</li>
</ul>

]]></content>
  </entry>
  
</feed>
