<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Passionate Developer]]></title>
  <link href="http://mkuthan.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://mkuthan.github.io/"/>
  <updated>2017-11-26T21:35:57+00:00</updated>
  <id>http://mkuthan.github.io/</id>
  <author>
    <name><![CDATA[Marcin Kuthan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitFlow Step by Step]]></title>
    <link href="http://mkuthan.github.io/blog/2013/07/21/gitflow-step-by-step/"/>
    <updated>2013-07-21T00:00:00+00:00</updated>
    <id>http://mkuthan.github.io/blog/2013/07/21/gitflow-step-by-step</id>
    <content type="html"><![CDATA[<p>Git Flow is a mainstream process for branch per feature development. Git Flow  is the best method I&rsquo;ve found for
managing project developed by small to medium project teams. Before you start reading this post you should read two
mandatory lectures:</p>

<p><a href="https://www.atlassian.com/git/workflows#!workflow-gitflow">Git Workflows by Atlassian</a></p>

<p><a href="https://bitbucket.org/atlassian/jgit-flow/wiki/Home">Maven JGit-Flow Plugin</a></p>

<p>This blog post is a step by step instruction how to use Git Flow together with Maven build tool, continuous integration
server (e.g: Bamboo) and bug tracker (e.g: JIRA). If you are interested in how to automate the whole process, watch this
<a href="https://www.youtube.com/watch?v=YIgX67c-2hQ">Flow with Bamboo</a> video. But I really recommend to start using Git Flow
with pure git commands, when you understand the concept move to Git Flow, and then automate everything eventually.</p>

<h2>Start feature branch</h2>

<ol>
<li>Assign JIRA task to you.</li>
<li>Move JIRA tasks from &ldquo;To Do&rdquo; to &ldquo;In Progress&rdquo;.</li>
<li><p>Create feature branch for the JIRA user story (if it is a first task of the user story).
Feature branch must reflect JIRA issue number and have meaningful name, e.g: <em>PROJ-01_user_registration</em>.</p>

<pre><code>  mvn jgitflow:feature-start
</code></pre></li>
<li><p>Verify that:</p>

<ul>
<li>New local feature branch <em>feature/PROJ-01_user_registration</em> is created.</li>
</ul>
</li>
<li><p>Optionally push feature branch into remote repository.</p>

<pre><code> git push origin feature/PROJ-01_user_registration
</code></pre></li>
<li><p>Verify that:</p>

<ul>
<li>The feature branch is pushed into remote repository.</li>
<li>New Bamboo build plan is created for the feature branch.</li>
</ul>
</li>
</ol>


<h2>Checkout the feature branch</h2>

<ol>
<li><p>Checkout the feature branch created by other developer (e.g for code review).</p>

<pre><code> git checkout feature/PROJ-01_user_registration
</code></pre></li>
</ol>


<h2>Work on the feature branch</h2>

<ol>
<li><p>Periodically push changes to the remote repository.</p>

<pre><code> git push origin feature/PROJ-01_user_registration
</code></pre></li>
<li><p>Verify that:</p>

<ul>
<li>Bamboo build plan for feature branch is green.</li>
</ul>
</li>
</ol>


<h2>Finish feature branch</h2>

<ol>
<li><p>Ensure your local develop branch is up to date.</p>

<pre><code> git checkout develop
 git pull origin develop
</code></pre></li>
<li><p>To avoid conflicts during finishing feature branch, ensure that all changes from develop are merged to the feature branch.</p>

<pre><code> git checkout feature/PROJ-01_user_registration
 git pull origin develop
</code></pre></li>
<li><p>Resolve all conflicts (if any) and commit changes.</p>

<pre><code> git commit -a -m "Conflicts resolved"
</code></pre></li>
<li><p>Finish the feature.</p>

<pre><code> mvn jgitflow:feature-finish
</code></pre></li>
<li><p>Push changes from develop into remote repository</p>

<pre><code> git push origin develop
</code></pre></li>
<li><p>Move JIRA task to &ldquo;Done&rdquo; category.</p></li>
<li><p>Verify that:</p>

<ul>
<li>Feature branch is merged into develop branch.</li>
<li>Local feature branch is removed.</li>
<li>Bamboo build plan for develop is green.</li>
</ul>
</li>
</ol>


<h2>Start release branch</h2>

<ol>
<li><p>Create release branch.</p>

<pre><code> mvn jgitflow:release-start
</code></pre></li>
<li><p>Verify that:</p>

<ul>
<li>New local release branch release/version is created.</li>
<li>Work with release branch</li>
</ul>
</li>
</ol>


<h2>Work with release branch</h2>

<ol>
<li><p>Clean the database (Database).</p></li>
<li><p>Run the application (Running Application) and perform exploratory tests.</p></li>
<li><p>Fix all issues (if any).</p></li>
<li><p>Commit changes to the release branch.</p>

<pre><code> git commit -a -m "Fixes release candidate"
</code></pre></li>
</ol>


<h2>Finish release branch</h2>

<ol>
<li><p>Make sure your local master branch is up to date</p>

<pre><code> git fetch origin master
</code></pre></li>
<li><p>Finish the release branch</p>

<pre><code> mvn jgitflow:release-finish
</code></pre></li>
<li><p>Verify that:</p>

<ul>
<li>Release branch is merged into local develop branch.</li>
<li>Project version is updated in local develop branch.</li>
</ul>
</li>
<li><p>Push changes from develop into remote repository</p>

<pre><code> git push origin develop
</code></pre></li>
<li><p>Checkout master</p>

<pre><code> git checkout master
</code></pre></li>
<li><p>Verify that:</p>

<ul>
<li>Release branch is merged into local master branch.</li>
<li>Project version is updated in local master branch.</li>
</ul>
</li>
<li><p>Push changes from master into remote repository</p>

<pre><code> git push --tags origin master
</code></pre></li>
<li><p>Verify that:</p>

<ul>
<li>Release tag is pushed to the remote repository.</li>
<li>Build plan on master is green and new version is deployed.</li>
</ul>
</li>
<li><p>Delete released feature branches from remote repository.</p>

<pre><code> git push origin :feature/PROJ-01_user_registration
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Convince Your Manager to Adopt Git]]></title>
    <link href="http://mkuthan.github.io/blog/2012/11/13/how-to-convince-your-manager-to-adopt/"/>
    <updated>2012-11-13T00:00:00+00:00</updated>
    <id>http://mkuthan.github.io/blog/2012/11/13/how-to-convince-your-manager-to-adopt</id>
    <content type="html"><![CDATA[<p>Distributed Concurrent Versions Systems (DCVSs) like Git or Mercurial has
changed software delivery processes significantly. I would not want to go back
to the mid ages of Subversion, and I&rsquo;m able to convince almost any developer
to use DCVS. Convincing managers is much more tough task. Below I collected
some insights about DVCS which could help.</p>

<p><a href="http://blogs.gartner.com/tom_murphy/2012/05/10/dvcs-begins-to-come-of-%0Aage/">Gartner &ndash; DVCS Begins to Come of
Age</a></p>

<blockquote><p>DVCS systems provide advantages in performance for branch and merge
operations thus enabling a smoother workflow during refactoring and with teams
that may be distributed. Over the last 6 months we have seen significant
investment into support for Git and Mercurial and other vendors who have been
delivering commercial DVCS systems This growing support will speed migration
for organizations that currently use Subversion but are struggling with
branch/merge overhead.</p></blockquote>

<p><a href="http://www.thoughtworks.com/articles/technology-radar-july-2011">ThoughtWorks Technology Radar (July
2011)</a></p>

<blockquote><p>Starting from a challenge posed to the Linux community to stop using
commercial version control, Git has proved itself. Git embodies a well
architected, high performance implementation of distributed version control.
Git is powerful, so it should be used with respect, but that power enables
agile engineering workflows that simply cannot exist with other tools. Git’s
popularity is supported by the existence of GitHub. GitHub combines public and
private Git repositories, social networking, and a host of other innovative
tools and approaches.<br/>
Some tools seek to enable and facilitate different ways of working.
Unfortunately other tools are created using a different premise, one of low
trust in users and the need to enforce a predefined process. ClearCase and TFS
do this. This makes version control systems with “implicit workflow”
unsuitable tools for modern agile software development. Project methodologies
and the best ways of working on a project need to emerge. Tools that enforce
high ceremony around things like check in just get in the way and kill
productivity.</p></blockquote>

<p><img class="<a" src="href="https://lh4.googleusercontent.com/-RCjnnI3YBR8/U3usDDBQVTI/AAAAAAAAV9s/YbgJ-lD1D5M/s619/radar-tools-july-2011.jpg">https://lh4.googleusercontent.com/-RCjnnI3YBR8/U3usDDBQVTI/AAAAAAAAV9s/YbgJ-lD1D5M/s619/radar-tools-july-2011.jpg</a>"></p>

<p><a href="http://en.wikipedia.org/wiki/Distributed_Concurrent_Versions_System">Wikipedia</a></p>

<blockquote><p><em>String support for non-linear development</em><br/>
Git supports rapid branching and merging, and includes specific tools for
visualizing and navigating a non-linear development history. A core assumption
in Git is that a change will be merged more often than it is written, as it is
passed around various reviewers. Branches in git are very lightweight: A
branch in git is only a reference to a single commit. With its parental
commits, the full branch structure can be constructed.</p>

<p><em>Efficient handling of large projects</em>
Torvalds has described Git as being very fast and scalable, and performance
tests done by Mozilla showed it was an order of magnitude faster than some
revision control systems, and fetching revision history from a locally stored
repository can be one hundred times faster than fetching it from the remote
server. In particular, Git does not get slower as the project history grows
larger.</p></blockquote>

<p><a href="http://blogs.atlassian.com/2013/01/svn-to-git-how-atlassian-made-the-switch-without-sacrificing-active-development/">From SVN to Git &ndash; Atlassian Case Study</a></p>

<blockquote><p>If Subversion has met my version control needs for many years, why should I
change? To me, that is the wrong question. The real question is, &ldquo;How can DVCS
make what we do today even better&rdquo;?</p></blockquote>
]]></content>
  </entry>
  
</feed>
